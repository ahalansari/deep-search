"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/deep-search";
exports.ids = ["pages/api/deep-search"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeep-search&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdeep-search.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeep-search&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdeep-search.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_deep_search_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/deep-search.ts */ \"(api)/./pages/api/deep-search.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deep_search_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deep_search_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/deep-search\",\n        pathname: \"/api/deep-search\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_deep_search_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRlZXAtc2VhcmNoJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZkZWVwLXNlYXJjaC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN1RDtBQUN2RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RlZXBzZWFyY2gtbmV4dGpzLz9mYzNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZGVlcC1zZWFyY2gudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZWVwLXNlYXJjaFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RlZXAtc2VhcmNoXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeep-search&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdeep-search.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/searchService.ts":
/*!******************************!*\
  !*** ./lib/searchService.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepSearchService: () => (/* binding */ DeepSearchService)\n/* harmony export */ });\nclass DeepSearchService {\n    constructor(settings){\n        this.searxUrl = settings?.searxUrl || \"http://localhost:8080\";\n        this.aiUrl = settings?.aiUrl || \"http://localhost:1234\";\n        this.selectedModel = settings?.selectedModel || \"qwen/qwen3-30b-a3b-2507\";\n        this.temperature = settings?.temperature || 0.7;\n        this.maxTokens = settings?.maxTokens || -1;\n        this.timeout = settings?.timeout || 60000;\n        this.systemPromptPrefix = settings?.systemPromptPrefix || \"\";\n    }\n    async searchSearx(query, maxResults = 10) {\n        try {\n            const url = `${this.searxUrl}/search`;\n            const params = new URLSearchParams({\n                q: query,\n                format: \"json\"\n            });\n            const response = await fetch(`${url}?${params}`, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (compatible; DeepSearchBot/1.0)\"\n                },\n                signal: AbortSignal.timeout(15000)\n            });\n            if (!response.ok) {\n                throw new Error(`Searx responded with status ${response.status}`);\n            }\n            const data = await response.json();\n            const results = data.results || [];\n            return results.slice(0, maxResults).map((r)=>({\n                    title: r.title || \"\",\n                    content: r.content || \"\",\n                    url: r.url || \"\",\n                    engine: r.engine || \"unknown\",\n                    score: r.score || 0\n                }));\n        } catch (error) {\n            console.error(\"Search error:\", error);\n            return [];\n        }\n    }\n    async analyzeSearchCompleteness(originalQuery, currentResults, currentRound) {\n        if (!currentResults.length) {\n            return {\n                isComplete: false,\n                reason: \"No results found yet\",\n                suggestedQueries: [\n                    `${originalQuery} basics`,\n                    `${originalQuery} overview`\n                ],\n                confidence: 0\n            };\n        }\n        const resultsContext = currentResults.slice(0, 10).map((r)=>`${r.title}: ${r.content}`).join(\"\\n\").slice(0, 2000);\n        const analysisPrompt = `As an AI research assistant, analyze if we have sufficient information to comprehensively answer: \"${originalQuery}\"\n\nCurrent search results (Round ${currentRound}):\n${resultsContext}\n\nPlease analyze and respond in this exact JSON format:\n{\n  \"isComplete\": boolean,\n  \"reason\": \"Brief explanation of why search is complete or needs more info\",\n  \"suggestedQueries\": [\"query1\", \"query2\", \"query3\"],\n  \"confidence\": number between 0-1,\n  \"missingAspects\": [\"aspect1\", \"aspect2\"]\n}\n\nGuidelines for determining completeness:\n- isComplete = true if we have comprehensive coverage of the topic\n- isComplete = false if missing key information, recent updates, or important perspectives\n- suggestedQueries should target specific gaps in knowledge\n- confidence should reflect how well the current results answer the original query\n- Consider: technical details, recent developments, different viewpoints, practical applications\n\nBe decisive - lean towards continuing search if there are any significant gaps.`;\n        try {\n            const response = await this.askAI(analysisPrompt, \"\", 0.1); // Low temperature for consistency\n            // Try to parse JSON response\n            const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(\"No JSON found in response\");\n            }\n            const analysis = JSON.parse(jsonMatch[0]);\n            // Validate response structure\n            if (typeof analysis.isComplete !== \"boolean\") {\n                throw new Error(\"Invalid response format\");\n            }\n            return {\n                isComplete: analysis.isComplete,\n                reason: analysis.reason || \"AI analysis completed\",\n                suggestedQueries: Array.isArray(analysis.suggestedQueries) ? analysis.suggestedQueries.slice(0, 3) : [],\n                confidence: typeof analysis.confidence === \"number\" ? Math.max(0, Math.min(1, analysis.confidence)) : 0.5\n            };\n        } catch (error) {\n            console.error(\"Search completeness analysis failed:\", error);\n            // Fallback analysis based on simple heuristics\n            const hasEnoughResults = currentResults.length >= 15;\n            const hasRecentContent = currentResults.some((r)=>r.content.toLowerCase().includes(\"2024\") || r.content.toLowerCase().includes(\"recent\") || r.content.toLowerCase().includes(\"latest\"));\n            const hasTechnicalContent = currentResults.some((r)=>r.content.length > 200 && (r.content.includes(\"how\") || r.content.includes(\"technical\") || r.content.includes(\"implementation\")));\n            const isComplete = hasEnoughResults && hasRecentContent && hasTechnicalContent && currentRound >= 3;\n            return {\n                isComplete,\n                reason: isComplete ? \"Heuristic analysis suggests sufficient information gathered\" : \"Heuristic analysis suggests more information needed\",\n                suggestedQueries: isComplete ? [] : [\n                    `${originalQuery} latest developments 2024`,\n                    `${originalQuery} technical implementation`,\n                    `${originalQuery} best practices`\n                ],\n                confidence: isComplete ? 0.7 : 0.4\n            };\n        }\n    }\n    async generateFollowUpQueries(originalQuery, initialResults) {\n        // This method is now mainly used as a fallback\n        // The main logic is in analyzeSearchCompleteness\n        if (!initialResults.length) {\n            return [];\n        }\n        const allContent = initialResults.slice(0, 5).map((r)=>`${r.title} ${r.content}`).join(\" \").slice(0, 1000);\n        const prompt = `Based on the original query \"${originalQuery}\" and these search results:\n${allContent}...\n\nGenerate 3-4 specific follow-up search queries that would provide deeper, more comprehensive information. Focus on:\n1. Technical details or specifics\n2. Recent developments or updates\n3. Different perspectives or approaches\n4. Related concepts or alternatives\n\nReturn only the queries, one per line, without numbers or bullets.`;\n        try {\n            const followUpQueries = await this.askAI(prompt, \"\");\n            return followUpQueries.split(\"\\n\").map((q)=>q.trim()).filter((q)=>q.length > 10).slice(0, 4);\n        } catch (error) {\n            console.error(\"Follow-up query generation failed:\", error);\n            // Fallback queries\n            return [\n                `${originalQuery} latest developments`,\n                `${originalQuery} technical details`,\n                `${originalQuery} alternatives comparison`\n            ];\n        }\n    }\n    async askAI(userPrompt, searchContext, temperature = 0.7) {\n        const currentDate = new Date().toLocaleDateString(\"en-US\", {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\",\n            timeZone: \"UTC\"\n        });\n        const baseSystemMessage = `You are an expert research assistant with access to comprehensive search data. \nToday's date is ${currentDate}. Use this temporal context when analyzing information, especially when discussing recent developments, trends, or time-sensitive topics.\n\nSearch Context:\n${searchContext}\n\nGuidelines:\n- Synthesize information from multiple sources\n- Cite key facts and findings\n- Identify any conflicting information\n- Provide comprehensive coverage of the topic\n- Structure your response clearly with sections using Markdown formatting\n- Use proper Markdown syntax for headers (##), lists (-), bold (**text**), italic (*text*), and code blocks (\\`\\`\\`)\n- When mentioning dates or timeframes, consider the current date context\n- Distinguish between recent and older information based on the current date`;\n        const systemMessage = this.systemPromptPrefix ? `${this.systemPromptPrefix}\\n\\n${baseSystemMessage}` : baseSystemMessage;\n        const payload = {\n            model: this.selectedModel,\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemMessage\n                },\n                {\n                    role: \"user\",\n                    content: userPrompt\n                }\n            ],\n            temperature,\n            max_tokens: this.maxTokens,\n            stream: false\n        };\n        try {\n            const response = await fetch(`${this.aiUrl}/v1/chat/completions`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload),\n                signal: AbortSignal.timeout(this.timeout)\n            });\n            if (!response.ok) {\n                throw new Error(`AI API responded with status ${response.status}`);\n            }\n            const data = await response.json();\n            return data.choices[0].message.content;\n        } catch (error) {\n            console.error(\"AI request failed:\", error);\n            return `AI response failed: ${error}`;\n        }\n    }\n    async performAdaptiveSearch(query, maxDepth = 5, onProgress) {\n        const allResults = [];\n        let searchRound = 1;\n        let shouldContinueSearching = true;\n        // Progress callback helper\n        const updateProgress = (message)=>{\n            if (onProgress) onProgress(message);\n        };\n        updateProgress(`🧠 Starting AI-driven adaptive search for: \"${query}\"`);\n        // Initial search\n        updateProgress(`📍 Round ${searchRound}: Initial search`);\n        const initialResults = await this.searchSearx(query, 8);\n        allResults.push(...initialResults);\n        if (!initialResults.length) {\n            return {\n                results: [],\n                comprehensiveAnswer: \"No initial results found.\",\n                searchSummary: {\n                    totalResults: 0,\n                    sourceBreakdown: {},\n                    searchRounds: 1\n                }\n            };\n        }\n        updateProgress(`   Found ${initialResults.length} results`);\n        // AI-driven adaptive search loop\n        while(shouldContinueSearching && searchRound < maxDepth){\n            // Let AI analyze current information and decide next steps\n            const analysisResult = await this.analyzeSearchCompleteness(query, allResults, searchRound);\n            if (analysisResult.isComplete) {\n                updateProgress(`🎯 AI determined search is complete: ${analysisResult.reason}`);\n                shouldContinueSearching = false;\n                break;\n            }\n            if (analysisResult.suggestedQueries.length === 0) {\n                updateProgress(`🔍 AI found no additional search directions needed`);\n                shouldContinueSearching = false;\n                break;\n            }\n            // Execute AI-suggested follow-up searches\n            for (const suggestedQuery of analysisResult.suggestedQueries.slice(0, 2)){\n                searchRound++;\n                updateProgress(`📍 Round ${searchRound}: AI-suggested search - \"${suggestedQuery}\"`);\n                // Rate limiting\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                const followUpResults = await this.searchSearx(suggestedQuery, 6);\n                if (followUpResults.length) {\n                    // Filter out duplicates based on URL\n                    const existingUrls = new Set(allResults.map((r)=>r.url));\n                    const newResults = followUpResults.filter((r)=>!existingUrls.has(r.url));\n                    allResults.push(...newResults);\n                    updateProgress(`   Found ${newResults.length} new results`);\n                } else {\n                    updateProgress(`   No new results found`);\n                }\n            }\n        }\n        if (searchRound >= maxDepth) {\n            updateProgress(`🔄 Reached maximum search depth (${maxDepth})`);\n        }\n        // Compile comprehensive context\n        updateProgress(`🔬 AI analyzing ${allResults.length} total results...`);\n        const comprehensiveContext = this.compileSearchContext(allResults);\n        // Generate final comprehensive answer\n        const finalPrompt = `Based on my adaptive AI-driven search research, provide a comprehensive answer to: \"${query}\"\n\nI conducted ${searchRound} rounds of intelligent search, gathering ${allResults.length} results from multiple sources.\n\nConsider:\n- Key facts and findings from multiple sources\n- Recent developments and current state (remember today is ${new Date().toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n        })})\n- Different perspectives or approaches\n- Technical details and practical implications\n- Any limitations or conflicting information\n- The adaptive nature of this search means the information should be comprehensive\n\nFORMAT YOUR RESPONSE IN MARKDOWN with the following structure:\n## Overview\nBrief summary of the topic\n\n## Key Findings\n- Important facts and discoveries\n- Recent developments (with temporal context)\n\n## Technical Details\nSpecific technical information, code examples if relevant\n\n## Different Perspectives\nVarious viewpoints or approaches\n\n## Conclusion\nSummary and implications\n\nUse proper Markdown formatting including:\n- Headers (##, ###)\n- Bold (**text**) for emphasis\n- Lists (- item) for better organization\n- Code blocks (\\`\\`\\`) for technical content\n- Links when referencing sources`;\n        const comprehensiveAnswer = await this.askAI(finalPrompt, comprehensiveContext, 0.3);\n        // Calculate source breakdown\n        const sourceBreakdown = {};\n        allResults.forEach((result)=>{\n            const engine = result.engine || \"unknown\";\n            sourceBreakdown[engine] = (sourceBreakdown[engine] || 0) + 1;\n        });\n        updateProgress(`✅ Adaptive search completed with ${searchRound} rounds!`);\n        return {\n            results: allResults,\n            comprehensiveAnswer,\n            searchSummary: {\n                totalResults: allResults.length,\n                sourceBreakdown,\n                searchRounds: searchRound\n            }\n        };\n    }\n    // Legacy method for backward compatibility\n    async performDeepSearch(query, maxDepth = 3, onProgress) {\n        return this.performAdaptiveSearch(query, maxDepth, onProgress);\n    }\n    compileSearchContext(results) {\n        if (!results.length) {\n            return \"No search results available.\";\n        }\n        const contextParts = [];\n        // Group by engine/source for better organization\n        const byEngine = {};\n        results.forEach((result)=>{\n            const engine = result.engine || \"unknown\";\n            if (!byEngine[engine]) {\n                byEngine[engine] = [];\n            }\n            byEngine[engine].push(result);\n        });\n        Object.entries(byEngine).forEach(([engine, engineResults])=>{\n            contextParts.push(`\\n=== ${engine.toUpperCase()} RESULTS ===`);\n            engineResults.slice(0, 5).forEach((result, i)=>{\n                contextParts.push(`${i + 1}. ${result.title}`);\n                if (result.content) {\n                    contextParts.push(`   ${result.content.slice(0, 200)}...`);\n                }\n                contextParts.push(`   URL: ${result.url}`);\n                contextParts.push(\"\");\n            });\n        });\n        return contextParts.join(\"\\n\");\n    }\n    // Quick search method for backward compatibility\n    async quickSearch(query) {\n        return this.searchSearx(query, 3);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/searchService.ts\n");

/***/ }),

/***/ "(api)/./pages/api/deep-search.ts":
/*!**********************************!*\
  !*** ./pages/api/deep-search.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_searchService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/searchService */ \"(api)/./lib/searchService.ts\");\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            success: false,\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { query, maxDepth = 5, settings } = req.body;\n        console.log(\"Deep search request:\", {\n            query,\n            maxDepth,\n            hasSettings: !!settings\n        });\n        if (!query || typeof query !== \"string\") {\n            console.log(\"Invalid query:\", {\n                query,\n                type: typeof query\n            });\n            return res.status(400).json({\n                success: false,\n                error: \"Query is required and must be a string\"\n            });\n        }\n        if (maxDepth < 2 || maxDepth > 8) {\n            console.log(\"Invalid maxDepth:\", {\n                maxDepth\n            });\n            return res.status(400).json({\n                success: false,\n                error: \"Max depth must be between 2 and 8\"\n            });\n        }\n        const searchService = new _lib_searchService__WEBPACK_IMPORTED_MODULE_0__.DeepSearchService(settings);\n        // Perform deep search\n        const deepSearchResult = await searchService.performDeepSearch(query, maxDepth);\n        res.status(200).json({\n            success: true,\n            data: deepSearchResult\n        });\n    } catch (error) {\n        console.error(\"Deep search API error:\", error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error occurred\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZGVlcC1zZWFyY2gudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDNEQ7QUE4QjdDLGVBQWVDLFFBQzVCQyxHQUFtQixFQUNuQkMsR0FBd0M7SUFFeEMsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLFFBQVE7UUFDekIsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxTQUFTO1lBQU9DLE9BQU87UUFBcUI7SUFDNUU7SUFFQSxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsQ0FBQyxFQUFFQyxRQUFRLEVBQUUsR0FBc0JULElBQUlVLElBQUk7UUFFckVDLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0I7WUFBRUw7WUFBT0M7WUFBVUssYUFBYSxDQUFDLENBQUNKO1FBQVM7UUFFL0UsSUFBSSxDQUFDRixTQUFTLE9BQU9BLFVBQVUsVUFBVTtZQUN2Q0ksUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjtnQkFBRUw7Z0JBQU9PLE1BQU0sT0FBT1A7WUFBTTtZQUMxRCxPQUFPTixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUMxQkMsU0FBUztnQkFDVEMsT0FBTztZQUNUO1FBQ0Y7UUFFQSxJQUFJRSxXQUFXLEtBQUtBLFdBQVcsR0FBRztZQUNoQ0csUUFBUUMsR0FBRyxDQUFDLHFCQUFxQjtnQkFBRUo7WUFBUztZQUM1QyxPQUFPUCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUMxQkMsU0FBUztnQkFDVEMsT0FBTztZQUNUO1FBQ0Y7UUFFQSxNQUFNUyxnQkFBZ0IsSUFBSWpCLGlFQUFpQkEsQ0FBQ1c7UUFFNUMsc0JBQXNCO1FBQ3RCLE1BQU1PLG1CQUFtQixNQUFNRCxjQUFjRSxpQkFBaUIsQ0FBQ1YsT0FBT0M7UUFFdEVQLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJDLFNBQVM7WUFDVGEsTUFBTUY7UUFDUjtJQUVGLEVBQUUsT0FBT1YsT0FBTztRQUNkSyxRQUFRTCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4Q0wsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUNuQkMsU0FBUztZQUNUQyxPQUFPQSxpQkFBaUJhLFFBQVFiLE1BQU1jLE9BQU8sR0FBRztRQUNsRDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZWVwc2VhcmNoLW5leHRqcy8uL3BhZ2VzL2FwaS9kZWVwLXNlYXJjaC50cz8zM2EwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCB7IERlZXBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbGliL3NlYXJjaFNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgRGVlcFNlYXJjaFJlcXVlc3Qge1xuICBxdWVyeTogc3RyaW5nO1xuICBtYXhEZXB0aD86IG51bWJlcjtcbiAgc2V0dGluZ3M/OiB7XG4gICAgYWlVcmw/OiBzdHJpbmc7XG4gICAgc2VhcnhVcmw/OiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRNb2RlbD86IHN0cmluZztcbiAgICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcbiAgICBtYXhUb2tlbnM/OiBudW1iZXI7XG4gICAgdGltZW91dD86IG51bWJlcjtcbiAgICBzeXN0ZW1Qcm9tcHRQcmVmaXg/OiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBEZWVwU2VhcmNoUmVzcG9uc2Uge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBkYXRhPzoge1xuICAgIHJlc3VsdHM6IGFueVtdO1xuICAgIGNvbXByZWhlbnNpdmVBbnN3ZXI6IHN0cmluZztcbiAgICBzZWFyY2hTdW1tYXJ5OiB7XG4gICAgICB0b3RhbFJlc3VsdHM6IG51bWJlcjtcbiAgICAgIHNvdXJjZUJyZWFrZG93bjogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgICAgIHNlYXJjaFJvdW5kczogbnVtYmVyO1xuICAgIH07XG4gIH07XG4gIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxuICByZXE6IE5leHRBcGlSZXF1ZXN0LFxuICByZXM6IE5leHRBcGlSZXNwb25zZTxEZWVwU2VhcmNoUmVzcG9uc2U+XG4pIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgcXVlcnksIG1heERlcHRoID0gNSwgc2V0dGluZ3MgfTogRGVlcFNlYXJjaFJlcXVlc3QgPSByZXEuYm9keTtcblxuICAgIGNvbnNvbGUubG9nKCdEZWVwIHNlYXJjaCByZXF1ZXN0OicsIHsgcXVlcnksIG1heERlcHRoLCBoYXNTZXR0aW5nczogISFzZXR0aW5ncyB9KTtcblxuICAgIGlmICghcXVlcnkgfHwgdHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgcXVlcnk6JywgeyBxdWVyeSwgdHlwZTogdHlwZW9mIHF1ZXJ5IH0pO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgZXJyb3I6ICdRdWVyeSBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIHN0cmluZycgXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWF4RGVwdGggPCAyIHx8IG1heERlcHRoID4gOCkge1xuICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgbWF4RGVwdGg6JywgeyBtYXhEZXB0aCB9KTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgIGVycm9yOiAnTWF4IGRlcHRoIG11c3QgYmUgYmV0d2VlbiAyIGFuZCA4JyBcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNlYXJjaFNlcnZpY2UgPSBuZXcgRGVlcFNlYXJjaFNlcnZpY2Uoc2V0dGluZ3MpO1xuICAgIFxuICAgIC8vIFBlcmZvcm0gZGVlcCBzZWFyY2hcbiAgICBjb25zdCBkZWVwU2VhcmNoUmVzdWx0ID0gYXdhaXQgc2VhcmNoU2VydmljZS5wZXJmb3JtRGVlcFNlYXJjaChxdWVyeSwgbWF4RGVwdGgpO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGRlZXBTZWFyY2hSZXN1bHRcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RlZXAgc2VhcmNoIEFQSSBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCdcbiAgICB9KTtcbiAgfVxufSJdLCJuYW1lcyI6WyJEZWVwU2VhcmNoU2VydmljZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwicXVlcnkiLCJtYXhEZXB0aCIsInNldHRpbmdzIiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJoYXNTZXR0aW5ncyIsInR5cGUiLCJzZWFyY2hTZXJ2aWNlIiwiZGVlcFNlYXJjaFJlc3VsdCIsInBlcmZvcm1EZWVwU2VhcmNoIiwiZGF0YSIsIkVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/deep-search.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeep-search&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdeep-search.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();